
SOPC_BarreF.elf:     file format elf32-littlenios2
SOPC_BarreF.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000c6c memsz 0x00000c6c flags r-x
    LOAD off    0x00001c8c vaddr 0x00010c8c paddr 0x00010d7c align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001e6c vaddr 0x00010e6c paddr 0x00010e6c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001d7c  2**0
                  CONTENTS
  2 .text         00000c48  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  00010c68  00010c68  00001c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00010c8c  00010d7c  00001c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00010e6c  00010e6c  00001e6c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00010e7c  00010e7c  00001d7c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b0  00000000  00000000  00001da0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000035e0  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001329  00000000  00000000  00005630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000015a3  00000000  00000000  00006959  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003a8  00000000  00000000  00007efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f69  00000000  00000000  000082a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001300  00000000  00000000  0000920d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000a510  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  0000a520  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b7dd  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000b7e0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b7ec  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b7ed  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000b7ee  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000b7f9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000b804  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0000b80f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  0000b819  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00044e9b  00000000  00000000  0000b852  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010c68 l    d  .rodata	00000000 .rodata
00010c8c l    d  .rwdata	00000000 .rwdata
00010e6c l    d  .bss	00000000 .bss
00010e7c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/selgu/Desktop/M2_sme/BE/BE/Nios/software/SOPC_BarreF_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000101a0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00010c8c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010b3c g     F .text	0000002c alt_main
00010d7c g       *ABS*	00000000 __flash_rwdata_start
00010154 g     F .text	0000004c printf
00010b68 g     F .text	00000038 alt_putstr
00010c60 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010e6c g     O .bss	00000004 errno
00010e74 g     O .bss	00000004 alt_argv
00018d6c g       *ABS*	00000000 _gp
00010118 g     F .text	0000003c _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010978 g     F .text	00000064 .hidden __udivsi3
00010d6c g     O .rwdata	00000004 _global_impure_ptr
00010e7c g       *ABS*	00000000 __bss_end
00010c58 g     F .text	00000004 alt_dcache_flush_all
00010d7c g       *ABS*	00000000 __ram_rwdata_end
00010ba0 g     F .text	00000060 write
00010c8c g       *ABS*	00000000 __ram_rodata_end
00010d74 g     O .rwdata	00000004 jtag_uart_0
000109dc g     F .text	00000058 .hidden __umodsi3
00010e7c g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010c24 g     F .text	00000034 altera_avalon_jtag_uart_write
0001020c g     F .text	0000052c ___vfprintf_internal_r
00010020 g     F .text	0000003c _start
00010c20 g     F .text	00000004 alt_sys_init
00010a34 g     F .text	00000028 .hidden __mulsi3
00010c8c g       *ABS*	00000000 __ram_rwdata_start
00010c68 g       *ABS*	00000000 __ram_rodata_start
00010e7c g       *ABS*	00000000 __alt_stack_base
00010754 g     F .text	000000b8 __sfvwrite_small_dev
00010e6c g       *ABS*	00000000 __bss_start
0001007c g     F .text	0000009c main
00010e70 g     O .bss	00000004 alt_envp
00010d78 g     O .rwdata	00000004 alt_errno
00010880 g     F .text	00000084 .hidden __divsi3
00010c68 g       *ABS*	00000000 __flash_rodata_start
0001005c g     F .text	00000020 delay
00010c00 g     F .text	00000020 alt_irq_init
00010828 g     F .text	00000058 _write_r
00010d70 g     O .rwdata	00000004 _impure_ptr
00010e78 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010d7c g       *ABS*	00000000 _edata
00010e7c g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010904 g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
0001080c g     F .text	0000001c strlen
00010c5c g     F .text	00000004 alt_icache_flush_all
00010738 g     F .text	0000001c __vfprintf_internal
00010a5c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a35b14 	ori	gp,gp,36204
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10839b14 	ori	r2,r2,3692

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c39f14 	ori	r3,r3,3708

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff6044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0010a5c0 	call	10a5c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0010b3c0 	call	10b3c <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff6058>

0001005c <delay>:
#define animo_data (unsigned int *) (ANIMO_0_BASE + 4)
#define animo_Config(ST, continu, reset) (*animo_conf = (ST << 2) | (continu << 1) | reset)
#define animo_freq() *animo_data
//unsigned char a ;

void delay(volatile long unsigned t){
   1005c:	deffff04 	addi	sp,sp,-4
   10060:	d9000015 	stw	r4,0(sp)
	while(t--);
   10064:	d8800017 	ldw	r2,0(sp)
   10068:	10ffffc4 	addi	r3,r2,-1
   1006c:	d8c00015 	stw	r3,0(sp)
   10070:	103ffc1e 	bne	r2,zero,10064 <__alt_data_end+0xffff6064>
}
   10074:	dec00104 	addi	sp,sp,4
   10078:	f800283a 	ret

0001007c <main>:


int main()
{ 
   1007c:	defffe04 	addi	sp,sp,-8
	//a=(*animo_data) & 0xFF ;

	leds=0x30;
   10080:	008000b4 	movhi	r2,2
	while(t--);
}


int main()
{ 
   10084:	dc000015 	stw	r16,0(sp)
   10088:	dfc00115 	stw	ra,4(sp)
	//a=(*animo_data) & 0xFF ;

	leds=0x30;
   1008c:	00c00c04 	movi	r3,48
   10090:	10841404 	addi	r2,r2,4176
   10094:	10c00015 	stw	r3,0(r2)
	prescaler=5000-1;
   10098:	00c000b4 	movhi	r3,2
   1009c:	0084e1c4 	movi	r2,4999
   100a0:	18c40c04 	addi	r3,r3,4144
   100a4:	18800015 	stw	r2,0(r3)
	duty=5000-1;
   100a8:	00c000b4 	movhi	r3,2
   100ac:	18c40e04 	addi	r3,r3,4152
   100b0:	18800015 	stw	r2,0(r3)
	freq= 10000-1; //
   100b4:	008000b4 	movhi	r2,2
   100b8:	00c9c3c4 	movi	r3,9999
   100bc:	10840d04 	addi	r2,r2,4148
   100c0:	10c00015 	stw	r3,0(r2)
	start=0x1;
   100c4:	008000b4 	movhi	r2,2
   100c8:	00c00044 	movi	r3,1
   100cc:	10840f04 	addi	r2,r2,4156
   100d0:	10c00015 	stw	r3,0(r2)
	animo_Config(0,1,1);
   100d4:	008000b4 	movhi	r2,2
   100d8:	00c000c4 	movi	r3,3
   100dc:	10841c04 	addi	r2,r2,4208
  alt_putstr("Hello from Nios II!\n");
   100e0:	01000074 	movhi	r4,1
	leds=0x30;
	prescaler=5000-1;
	duty=5000-1;
	freq= 10000-1; //
	start=0x1;
	animo_Config(0,1,1);
   100e4:	10c00015 	stw	r3,0(r2)
  alt_putstr("Hello from Nios II!\n");
   100e8:	21031a04 	addi	r4,r4,3176

  /* Event loop never exits. */
  while (1){
	  delay(500000*2);
  printf("Freq = %d\n", animo_freq());
   100ec:	040000b4 	movhi	r16,2
	prescaler=5000-1;
	duty=5000-1;
	freq= 10000-1; //
	start=0x1;
	animo_Config(0,1,1);
  alt_putstr("Hello from Nios II!\n");
   100f0:	0010b680 	call	10b68 <alt_putstr>

  /* Event loop never exits. */
  while (1){
	  delay(500000*2);
  printf("Freq = %d\n", animo_freq());
   100f4:	84041d04 	addi	r16,r16,4212
	animo_Config(0,1,1);
  alt_putstr("Hello from Nios II!\n");

  /* Event loop never exits. */
  while (1){
	  delay(500000*2);
   100f8:	010003f4 	movhi	r4,15
   100fc:	21109004 	addi	r4,r4,16960
   10100:	001005c0 	call	1005c <delay>
  printf("Freq = %d\n", animo_freq());
   10104:	81400017 	ldw	r5,0(r16)
   10108:	01000074 	movhi	r4,1
   1010c:	21032004 	addi	r4,r4,3200
   10110:	00101540 	call	10154 <printf>
   10114:	003ff806 	br	100f8 <__alt_data_end+0xffff60f8>

00010118 <_printf_r>:
   10118:	defffd04 	addi	sp,sp,-12
   1011c:	dfc00015 	stw	ra,0(sp)
   10120:	d9800115 	stw	r6,4(sp)
   10124:	d9c00215 	stw	r7,8(sp)
   10128:	20c00217 	ldw	r3,8(r4)
   1012c:	01800074 	movhi	r6,1
   10130:	3181d504 	addi	r6,r6,1876
   10134:	19800115 	stw	r6,4(r3)
   10138:	280d883a 	mov	r6,r5
   1013c:	21400217 	ldw	r5,8(r4)
   10140:	d9c00104 	addi	r7,sp,4
   10144:	001020c0 	call	1020c <___vfprintf_internal_r>
   10148:	dfc00017 	ldw	ra,0(sp)
   1014c:	dec00304 	addi	sp,sp,12
   10150:	f800283a 	ret

00010154 <printf>:
   10154:	defffc04 	addi	sp,sp,-16
   10158:	dfc00015 	stw	ra,0(sp)
   1015c:	d9400115 	stw	r5,4(sp)
   10160:	d9800215 	stw	r6,8(sp)
   10164:	d9c00315 	stw	r7,12(sp)
   10168:	00800074 	movhi	r2,1
   1016c:	10835c04 	addi	r2,r2,3440
   10170:	10800017 	ldw	r2,0(r2)
   10174:	01400074 	movhi	r5,1
   10178:	2941d504 	addi	r5,r5,1876
   1017c:	10c00217 	ldw	r3,8(r2)
   10180:	d9800104 	addi	r6,sp,4
   10184:	19400115 	stw	r5,4(r3)
   10188:	200b883a 	mov	r5,r4
   1018c:	11000217 	ldw	r4,8(r2)
   10190:	00107380 	call	10738 <__vfprintf_internal>
   10194:	dfc00017 	ldw	ra,0(sp)
   10198:	dec00404 	addi	sp,sp,16
   1019c:	f800283a 	ret

000101a0 <print_repeat>:
   101a0:	defffb04 	addi	sp,sp,-20
   101a4:	dc800315 	stw	r18,12(sp)
   101a8:	dc400215 	stw	r17,8(sp)
   101ac:	dc000115 	stw	r16,4(sp)
   101b0:	dfc00415 	stw	ra,16(sp)
   101b4:	2025883a 	mov	r18,r4
   101b8:	2823883a 	mov	r17,r5
   101bc:	d9800005 	stb	r6,0(sp)
   101c0:	3821883a 	mov	r16,r7
   101c4:	04000a0e 	bge	zero,r16,101f0 <print_repeat+0x50>
   101c8:	88800117 	ldw	r2,4(r17)
   101cc:	01c00044 	movi	r7,1
   101d0:	d80d883a 	mov	r6,sp
   101d4:	880b883a 	mov	r5,r17
   101d8:	9009883a 	mov	r4,r18
   101dc:	103ee83a 	callr	r2
   101e0:	843fffc4 	addi	r16,r16,-1
   101e4:	103ff726 	beq	r2,zero,101c4 <__alt_data_end+0xffff61c4>
   101e8:	00bfffc4 	movi	r2,-1
   101ec:	00000106 	br	101f4 <print_repeat+0x54>
   101f0:	0005883a 	mov	r2,zero
   101f4:	dfc00417 	ldw	ra,16(sp)
   101f8:	dc800317 	ldw	r18,12(sp)
   101fc:	dc400217 	ldw	r17,8(sp)
   10200:	dc000117 	ldw	r16,4(sp)
   10204:	dec00504 	addi	sp,sp,20
   10208:	f800283a 	ret

0001020c <___vfprintf_internal_r>:
   1020c:	deffe504 	addi	sp,sp,-108
   10210:	d8c00804 	addi	r3,sp,32
   10214:	ddc01815 	stw	r23,96(sp)
   10218:	dd801715 	stw	r22,92(sp)
   1021c:	dd401615 	stw	r21,88(sp)
   10220:	dd001515 	stw	r20,84(sp)
   10224:	dcc01415 	stw	r19,80(sp)
   10228:	dc801315 	stw	r18,76(sp)
   1022c:	dc401215 	stw	r17,72(sp)
   10230:	dc001115 	stw	r16,68(sp)
   10234:	dfc01a15 	stw	ra,104(sp)
   10238:	df001915 	stw	fp,100(sp)
   1023c:	2029883a 	mov	r20,r4
   10240:	2823883a 	mov	r17,r5
   10244:	382d883a 	mov	r22,r7
   10248:	d9800f15 	stw	r6,60(sp)
   1024c:	0021883a 	mov	r16,zero
   10250:	d8000e15 	stw	zero,56(sp)
   10254:	d8000a15 	stw	zero,40(sp)
   10258:	002b883a 	mov	r21,zero
   1025c:	0027883a 	mov	r19,zero
   10260:	0025883a 	mov	r18,zero
   10264:	d8000c15 	stw	zero,48(sp)
   10268:	d8000b15 	stw	zero,44(sp)
   1026c:	002f883a 	mov	r23,zero
   10270:	d8c00915 	stw	r3,36(sp)
   10274:	d8c00f17 	ldw	r3,60(sp)
   10278:	19000003 	ldbu	r4,0(r3)
   1027c:	20803fcc 	andi	r2,r4,255
   10280:	1080201c 	xori	r2,r2,128
   10284:	10bfe004 	addi	r2,r2,-128
   10288:	10011e26 	beq	r2,zero,10704 <___vfprintf_internal_r+0x4f8>
   1028c:	00c00044 	movi	r3,1
   10290:	b8c01426 	beq	r23,r3,102e4 <___vfprintf_internal_r+0xd8>
   10294:	1dc00216 	blt	r3,r23,102a0 <___vfprintf_internal_r+0x94>
   10298:	b8000626 	beq	r23,zero,102b4 <___vfprintf_internal_r+0xa8>
   1029c:	00011506 	br	106f4 <___vfprintf_internal_r+0x4e8>
   102a0:	01400084 	movi	r5,2
   102a4:	b9401d26 	beq	r23,r5,1031c <___vfprintf_internal_r+0x110>
   102a8:	014000c4 	movi	r5,3
   102ac:	b9402b26 	beq	r23,r5,1035c <___vfprintf_internal_r+0x150>
   102b0:	00011006 	br	106f4 <___vfprintf_internal_r+0x4e8>
   102b4:	01400944 	movi	r5,37
   102b8:	1140fc26 	beq	r2,r5,106ac <___vfprintf_internal_r+0x4a0>
   102bc:	88800117 	ldw	r2,4(r17)
   102c0:	d9000005 	stb	r4,0(sp)
   102c4:	01c00044 	movi	r7,1
   102c8:	d80d883a 	mov	r6,sp
   102cc:	880b883a 	mov	r5,r17
   102d0:	a009883a 	mov	r4,r20
   102d4:	103ee83a 	callr	r2
   102d8:	1000d81e 	bne	r2,zero,1063c <___vfprintf_internal_r+0x430>
   102dc:	84000044 	addi	r16,r16,1
   102e0:	00010406 	br	106f4 <___vfprintf_internal_r+0x4e8>
   102e4:	01400c04 	movi	r5,48
   102e8:	1140fa26 	beq	r2,r5,106d4 <___vfprintf_internal_r+0x4c8>
   102ec:	01400944 	movi	r5,37
   102f0:	11400a1e 	bne	r2,r5,1031c <___vfprintf_internal_r+0x110>
   102f4:	d8800005 	stb	r2,0(sp)
   102f8:	88800117 	ldw	r2,4(r17)
   102fc:	b80f883a 	mov	r7,r23
   10300:	d80d883a 	mov	r6,sp
   10304:	880b883a 	mov	r5,r17
   10308:	a009883a 	mov	r4,r20
   1030c:	103ee83a 	callr	r2
   10310:	1000ca1e 	bne	r2,zero,1063c <___vfprintf_internal_r+0x430>
   10314:	84000044 	addi	r16,r16,1
   10318:	0000f506 	br	106f0 <___vfprintf_internal_r+0x4e4>
   1031c:	25fff404 	addi	r23,r4,-48
   10320:	bdc03fcc 	andi	r23,r23,255
   10324:	00c00244 	movi	r3,9
   10328:	1dc00936 	bltu	r3,r23,10350 <___vfprintf_internal_r+0x144>
   1032c:	00bfffc4 	movi	r2,-1
   10330:	90800426 	beq	r18,r2,10344 <___vfprintf_internal_r+0x138>
   10334:	01400284 	movi	r5,10
   10338:	9009883a 	mov	r4,r18
   1033c:	0010a340 	call	10a34 <__mulsi3>
   10340:	00000106 	br	10348 <___vfprintf_internal_r+0x13c>
   10344:	0005883a 	mov	r2,zero
   10348:	b8a5883a 	add	r18,r23,r2
   1034c:	0000e206 	br	106d8 <___vfprintf_internal_r+0x4cc>
   10350:	01400b84 	movi	r5,46
   10354:	1140e426 	beq	r2,r5,106e8 <___vfprintf_internal_r+0x4dc>
   10358:	05c00084 	movi	r23,2
   1035c:	213ff404 	addi	r4,r4,-48
   10360:	27003fcc 	andi	fp,r4,255
   10364:	00c00244 	movi	r3,9
   10368:	1f000936 	bltu	r3,fp,10390 <___vfprintf_internal_r+0x184>
   1036c:	00bfffc4 	movi	r2,-1
   10370:	98800426 	beq	r19,r2,10384 <___vfprintf_internal_r+0x178>
   10374:	01400284 	movi	r5,10
   10378:	9809883a 	mov	r4,r19
   1037c:	0010a340 	call	10a34 <__mulsi3>
   10380:	00000106 	br	10388 <___vfprintf_internal_r+0x17c>
   10384:	0005883a 	mov	r2,zero
   10388:	e0a7883a 	add	r19,fp,r2
   1038c:	0000d906 	br	106f4 <___vfprintf_internal_r+0x4e8>
   10390:	00c01b04 	movi	r3,108
   10394:	10c0d226 	beq	r2,r3,106e0 <___vfprintf_internal_r+0x4d4>
   10398:	013fffc4 	movi	r4,-1
   1039c:	99000226 	beq	r19,r4,103a8 <___vfprintf_internal_r+0x19c>
   103a0:	d8000b15 	stw	zero,44(sp)
   103a4:	00000106 	br	103ac <___vfprintf_internal_r+0x1a0>
   103a8:	04c00044 	movi	r19,1
   103ac:	01001a44 	movi	r4,105
   103b0:	11001626 	beq	r2,r4,1040c <___vfprintf_internal_r+0x200>
   103b4:	20800916 	blt	r4,r2,103dc <___vfprintf_internal_r+0x1d0>
   103b8:	010018c4 	movi	r4,99
   103bc:	11008826 	beq	r2,r4,105e0 <___vfprintf_internal_r+0x3d4>
   103c0:	01001904 	movi	r4,100
   103c4:	11001126 	beq	r2,r4,1040c <___vfprintf_internal_r+0x200>
   103c8:	01001604 	movi	r4,88
   103cc:	1100c81e 	bne	r2,r4,106f0 <___vfprintf_internal_r+0x4e4>
   103d0:	00c00044 	movi	r3,1
   103d4:	d8c00e15 	stw	r3,56(sp)
   103d8:	00001506 	br	10430 <___vfprintf_internal_r+0x224>
   103dc:	01001cc4 	movi	r4,115
   103e0:	11009826 	beq	r2,r4,10644 <___vfprintf_internal_r+0x438>
   103e4:	20800416 	blt	r4,r2,103f8 <___vfprintf_internal_r+0x1ec>
   103e8:	01001bc4 	movi	r4,111
   103ec:	1100c01e 	bne	r2,r4,106f0 <___vfprintf_internal_r+0x4e4>
   103f0:	05400204 	movi	r21,8
   103f4:	00000f06 	br	10434 <___vfprintf_internal_r+0x228>
   103f8:	01001d44 	movi	r4,117
   103fc:	11000d26 	beq	r2,r4,10434 <___vfprintf_internal_r+0x228>
   10400:	01001e04 	movi	r4,120
   10404:	11000a26 	beq	r2,r4,10430 <___vfprintf_internal_r+0x224>
   10408:	0000b906 	br	106f0 <___vfprintf_internal_r+0x4e4>
   1040c:	d8c00a17 	ldw	r3,40(sp)
   10410:	b7000104 	addi	fp,r22,4
   10414:	18000726 	beq	r3,zero,10434 <___vfprintf_internal_r+0x228>
   10418:	df000d15 	stw	fp,52(sp)
   1041c:	b5c00017 	ldw	r23,0(r22)
   10420:	b800080e 	bge	r23,zero,10444 <___vfprintf_internal_r+0x238>
   10424:	05efc83a 	sub	r23,zero,r23
   10428:	02400044 	movi	r9,1
   1042c:	00000606 	br	10448 <___vfprintf_internal_r+0x23c>
   10430:	05400404 	movi	r21,16
   10434:	b0c00104 	addi	r3,r22,4
   10438:	d8c00d15 	stw	r3,52(sp)
   1043c:	b5c00017 	ldw	r23,0(r22)
   10440:	d8000a15 	stw	zero,40(sp)
   10444:	0013883a 	mov	r9,zero
   10448:	d839883a 	mov	fp,sp
   1044c:	b8001726 	beq	r23,zero,104ac <___vfprintf_internal_r+0x2a0>
   10450:	a80b883a 	mov	r5,r21
   10454:	b809883a 	mov	r4,r23
   10458:	da401015 	stw	r9,64(sp)
   1045c:	00109780 	call	10978 <__udivsi3>
   10460:	a80b883a 	mov	r5,r21
   10464:	1009883a 	mov	r4,r2
   10468:	102d883a 	mov	r22,r2
   1046c:	0010a340 	call	10a34 <__mulsi3>
   10470:	b885c83a 	sub	r2,r23,r2
   10474:	00c00244 	movi	r3,9
   10478:	da401017 	ldw	r9,64(sp)
   1047c:	18800216 	blt	r3,r2,10488 <___vfprintf_internal_r+0x27c>
   10480:	10800c04 	addi	r2,r2,48
   10484:	00000506 	br	1049c <___vfprintf_internal_r+0x290>
   10488:	d8c00e17 	ldw	r3,56(sp)
   1048c:	18000226 	beq	r3,zero,10498 <___vfprintf_internal_r+0x28c>
   10490:	10800dc4 	addi	r2,r2,55
   10494:	00000106 	br	1049c <___vfprintf_internal_r+0x290>
   10498:	108015c4 	addi	r2,r2,87
   1049c:	e0800005 	stb	r2,0(fp)
   104a0:	b02f883a 	mov	r23,r22
   104a4:	e7000044 	addi	fp,fp,1
   104a8:	003fe806 	br	1044c <__alt_data_end+0xffff644c>
   104ac:	e6efc83a 	sub	r23,fp,sp
   104b0:	9dc5c83a 	sub	r2,r19,r23
   104b4:	0080090e 	bge	zero,r2,104dc <___vfprintf_internal_r+0x2d0>
   104b8:	e085883a 	add	r2,fp,r2
   104bc:	01400c04 	movi	r5,48
   104c0:	d8c00917 	ldw	r3,36(sp)
   104c4:	e009883a 	mov	r4,fp
   104c8:	e0c0032e 	bgeu	fp,r3,104d8 <___vfprintf_internal_r+0x2cc>
   104cc:	e7000044 	addi	fp,fp,1
   104d0:	21400005 	stb	r5,0(r4)
   104d4:	e0bffa1e 	bne	fp,r2,104c0 <__alt_data_end+0xffff64c0>
   104d8:	e6efc83a 	sub	r23,fp,sp
   104dc:	d8c00b17 	ldw	r3,44(sp)
   104e0:	4dd1883a 	add	r8,r9,r23
   104e4:	922dc83a 	sub	r22,r18,r8
   104e8:	18001626 	beq	r3,zero,10544 <___vfprintf_internal_r+0x338>
   104ec:	48000a26 	beq	r9,zero,10518 <___vfprintf_internal_r+0x30c>
   104f0:	00800b44 	movi	r2,45
   104f4:	d8800805 	stb	r2,32(sp)
   104f8:	88800117 	ldw	r2,4(r17)
   104fc:	01c00044 	movi	r7,1
   10500:	d9800804 	addi	r6,sp,32
   10504:	880b883a 	mov	r5,r17
   10508:	a009883a 	mov	r4,r20
   1050c:	103ee83a 	callr	r2
   10510:	10004a1e 	bne	r2,zero,1063c <___vfprintf_internal_r+0x430>
   10514:	84000044 	addi	r16,r16,1
   10518:	0580070e 	bge	zero,r22,10538 <___vfprintf_internal_r+0x32c>
   1051c:	b00f883a 	mov	r7,r22
   10520:	01800c04 	movi	r6,48
   10524:	880b883a 	mov	r5,r17
   10528:	a009883a 	mov	r4,r20
   1052c:	00101a00 	call	101a0 <print_repeat>
   10530:	1000421e 	bne	r2,zero,1063c <___vfprintf_internal_r+0x430>
   10534:	85a1883a 	add	r16,r16,r22
   10538:	e02d883a 	mov	r22,fp
   1053c:	bf2fc83a 	sub	r23,r23,fp
   10540:	00002006 	br	105c4 <___vfprintf_internal_r+0x3b8>
   10544:	0580090e 	bge	zero,r22,1056c <___vfprintf_internal_r+0x360>
   10548:	b00f883a 	mov	r7,r22
   1054c:	01800804 	movi	r6,32
   10550:	880b883a 	mov	r5,r17
   10554:	a009883a 	mov	r4,r20
   10558:	da401015 	stw	r9,64(sp)
   1055c:	00101a00 	call	101a0 <print_repeat>
   10560:	da401017 	ldw	r9,64(sp)
   10564:	1000351e 	bne	r2,zero,1063c <___vfprintf_internal_r+0x430>
   10568:	85a1883a 	add	r16,r16,r22
   1056c:	483ff226 	beq	r9,zero,10538 <__alt_data_end+0xffff6538>
   10570:	00800b44 	movi	r2,45
   10574:	d8800805 	stb	r2,32(sp)
   10578:	88800117 	ldw	r2,4(r17)
   1057c:	01c00044 	movi	r7,1
   10580:	d9800804 	addi	r6,sp,32
   10584:	880b883a 	mov	r5,r17
   10588:	a009883a 	mov	r4,r20
   1058c:	103ee83a 	callr	r2
   10590:	10002a1e 	bne	r2,zero,1063c <___vfprintf_internal_r+0x430>
   10594:	84000044 	addi	r16,r16,1
   10598:	003fe706 	br	10538 <__alt_data_end+0xffff6538>
   1059c:	b5bfffc4 	addi	r22,r22,-1
   105a0:	b0800003 	ldbu	r2,0(r22)
   105a4:	01c00044 	movi	r7,1
   105a8:	d9800804 	addi	r6,sp,32
   105ac:	d8800805 	stb	r2,32(sp)
   105b0:	88800117 	ldw	r2,4(r17)
   105b4:	880b883a 	mov	r5,r17
   105b8:	a009883a 	mov	r4,r20
   105bc:	103ee83a 	callr	r2
   105c0:	10001e1e 	bne	r2,zero,1063c <___vfprintf_internal_r+0x430>
   105c4:	8585c83a 	sub	r2,r16,r22
   105c8:	b5c9883a 	add	r4,r22,r23
   105cc:	e085883a 	add	r2,fp,r2
   105d0:	013ff216 	blt	zero,r4,1059c <__alt_data_end+0xffff659c>
   105d4:	1021883a 	mov	r16,r2
   105d8:	dd800d17 	ldw	r22,52(sp)
   105dc:	00004406 	br	106f0 <___vfprintf_internal_r+0x4e4>
   105e0:	00800044 	movi	r2,1
   105e4:	1480080e 	bge	r2,r18,10608 <___vfprintf_internal_r+0x3fc>
   105e8:	95ffffc4 	addi	r23,r18,-1
   105ec:	b80f883a 	mov	r7,r23
   105f0:	01800804 	movi	r6,32
   105f4:	880b883a 	mov	r5,r17
   105f8:	a009883a 	mov	r4,r20
   105fc:	00101a00 	call	101a0 <print_repeat>
   10600:	10000e1e 	bne	r2,zero,1063c <___vfprintf_internal_r+0x430>
   10604:	85e1883a 	add	r16,r16,r23
   10608:	b0800017 	ldw	r2,0(r22)
   1060c:	01c00044 	movi	r7,1
   10610:	d80d883a 	mov	r6,sp
   10614:	d8800005 	stb	r2,0(sp)
   10618:	88800117 	ldw	r2,4(r17)
   1061c:	880b883a 	mov	r5,r17
   10620:	a009883a 	mov	r4,r20
   10624:	b5c00104 	addi	r23,r22,4
   10628:	103ee83a 	callr	r2
   1062c:	1000031e 	bne	r2,zero,1063c <___vfprintf_internal_r+0x430>
   10630:	84000044 	addi	r16,r16,1
   10634:	b82d883a 	mov	r22,r23
   10638:	00002d06 	br	106f0 <___vfprintf_internal_r+0x4e4>
   1063c:	00bfffc4 	movi	r2,-1
   10640:	00003106 	br	10708 <___vfprintf_internal_r+0x4fc>
   10644:	b5c00017 	ldw	r23,0(r22)
   10648:	b7000104 	addi	fp,r22,4
   1064c:	b809883a 	mov	r4,r23
   10650:	001080c0 	call	1080c <strlen>
   10654:	9091c83a 	sub	r8,r18,r2
   10658:	102d883a 	mov	r22,r2
   1065c:	0200090e 	bge	zero,r8,10684 <___vfprintf_internal_r+0x478>
   10660:	400f883a 	mov	r7,r8
   10664:	01800804 	movi	r6,32
   10668:	880b883a 	mov	r5,r17
   1066c:	a009883a 	mov	r4,r20
   10670:	da001015 	stw	r8,64(sp)
   10674:	00101a00 	call	101a0 <print_repeat>
   10678:	da001017 	ldw	r8,64(sp)
   1067c:	103fef1e 	bne	r2,zero,1063c <__alt_data_end+0xffff663c>
   10680:	8221883a 	add	r16,r16,r8
   10684:	88800117 	ldw	r2,4(r17)
   10688:	b00f883a 	mov	r7,r22
   1068c:	b80d883a 	mov	r6,r23
   10690:	880b883a 	mov	r5,r17
   10694:	a009883a 	mov	r4,r20
   10698:	103ee83a 	callr	r2
   1069c:	103fe71e 	bne	r2,zero,1063c <__alt_data_end+0xffff663c>
   106a0:	85a1883a 	add	r16,r16,r22
   106a4:	e02d883a 	mov	r22,fp
   106a8:	00001106 	br	106f0 <___vfprintf_internal_r+0x4e4>
   106ac:	00c00044 	movi	r3,1
   106b0:	04ffffc4 	movi	r19,-1
   106b4:	d8000e15 	stw	zero,56(sp)
   106b8:	d8c00a15 	stw	r3,40(sp)
   106bc:	05400284 	movi	r21,10
   106c0:	9825883a 	mov	r18,r19
   106c4:	d8000c15 	stw	zero,48(sp)
   106c8:	d8000b15 	stw	zero,44(sp)
   106cc:	182f883a 	mov	r23,r3
   106d0:	00000806 	br	106f4 <___vfprintf_internal_r+0x4e8>
   106d4:	ddc00b15 	stw	r23,44(sp)
   106d8:	05c00084 	movi	r23,2
   106dc:	00000506 	br	106f4 <___vfprintf_internal_r+0x4e8>
   106e0:	00c00044 	movi	r3,1
   106e4:	d8c00c15 	stw	r3,48(sp)
   106e8:	05c000c4 	movi	r23,3
   106ec:	00000106 	br	106f4 <___vfprintf_internal_r+0x4e8>
   106f0:	002f883a 	mov	r23,zero
   106f4:	d8c00f17 	ldw	r3,60(sp)
   106f8:	18c00044 	addi	r3,r3,1
   106fc:	d8c00f15 	stw	r3,60(sp)
   10700:	003edc06 	br	10274 <__alt_data_end+0xffff6274>
   10704:	8005883a 	mov	r2,r16
   10708:	dfc01a17 	ldw	ra,104(sp)
   1070c:	df001917 	ldw	fp,100(sp)
   10710:	ddc01817 	ldw	r23,96(sp)
   10714:	dd801717 	ldw	r22,92(sp)
   10718:	dd401617 	ldw	r21,88(sp)
   1071c:	dd001517 	ldw	r20,84(sp)
   10720:	dcc01417 	ldw	r19,80(sp)
   10724:	dc801317 	ldw	r18,76(sp)
   10728:	dc401217 	ldw	r17,72(sp)
   1072c:	dc001117 	ldw	r16,68(sp)
   10730:	dec01b04 	addi	sp,sp,108
   10734:	f800283a 	ret

00010738 <__vfprintf_internal>:
   10738:	00800074 	movhi	r2,1
   1073c:	10835c04 	addi	r2,r2,3440
   10740:	300f883a 	mov	r7,r6
   10744:	280d883a 	mov	r6,r5
   10748:	200b883a 	mov	r5,r4
   1074c:	11000017 	ldw	r4,0(r2)
   10750:	001020c1 	jmpi	1020c <___vfprintf_internal_r>

00010754 <__sfvwrite_small_dev>:
   10754:	2880000b 	ldhu	r2,0(r5)
   10758:	1080020c 	andi	r2,r2,8
   1075c:	10002126 	beq	r2,zero,107e4 <__sfvwrite_small_dev+0x90>
   10760:	2880008f 	ldh	r2,2(r5)
   10764:	defffa04 	addi	sp,sp,-24
   10768:	dc000015 	stw	r16,0(sp)
   1076c:	dfc00515 	stw	ra,20(sp)
   10770:	dd000415 	stw	r20,16(sp)
   10774:	dcc00315 	stw	r19,12(sp)
   10778:	dc800215 	stw	r18,8(sp)
   1077c:	dc400115 	stw	r17,4(sp)
   10780:	2821883a 	mov	r16,r5
   10784:	10001216 	blt	r2,zero,107d0 <__sfvwrite_small_dev+0x7c>
   10788:	2027883a 	mov	r19,r4
   1078c:	3025883a 	mov	r18,r6
   10790:	3823883a 	mov	r17,r7
   10794:	05010004 	movi	r20,1024
   10798:	04400b0e 	bge	zero,r17,107c8 <__sfvwrite_small_dev+0x74>
   1079c:	880f883a 	mov	r7,r17
   107a0:	a440010e 	bge	r20,r17,107a8 <__sfvwrite_small_dev+0x54>
   107a4:	01c10004 	movi	r7,1024
   107a8:	8140008f 	ldh	r5,2(r16)
   107ac:	900d883a 	mov	r6,r18
   107b0:	9809883a 	mov	r4,r19
   107b4:	00108280 	call	10828 <_write_r>
   107b8:	0080050e 	bge	zero,r2,107d0 <__sfvwrite_small_dev+0x7c>
   107bc:	88a3c83a 	sub	r17,r17,r2
   107c0:	90a5883a 	add	r18,r18,r2
   107c4:	003ff406 	br	10798 <__alt_data_end+0xffff6798>
   107c8:	0005883a 	mov	r2,zero
   107cc:	00000706 	br	107ec <__sfvwrite_small_dev+0x98>
   107d0:	8080000b 	ldhu	r2,0(r16)
   107d4:	10801014 	ori	r2,r2,64
   107d8:	8080000d 	sth	r2,0(r16)
   107dc:	00bfffc4 	movi	r2,-1
   107e0:	00000206 	br	107ec <__sfvwrite_small_dev+0x98>
   107e4:	00bfffc4 	movi	r2,-1
   107e8:	f800283a 	ret
   107ec:	dfc00517 	ldw	ra,20(sp)
   107f0:	dd000417 	ldw	r20,16(sp)
   107f4:	dcc00317 	ldw	r19,12(sp)
   107f8:	dc800217 	ldw	r18,8(sp)
   107fc:	dc400117 	ldw	r17,4(sp)
   10800:	dc000017 	ldw	r16,0(sp)
   10804:	dec00604 	addi	sp,sp,24
   10808:	f800283a 	ret

0001080c <strlen>:
   1080c:	2005883a 	mov	r2,r4
   10810:	10c00007 	ldb	r3,0(r2)
   10814:	18000226 	beq	r3,zero,10820 <strlen+0x14>
   10818:	10800044 	addi	r2,r2,1
   1081c:	003ffc06 	br	10810 <__alt_data_end+0xffff6810>
   10820:	1105c83a 	sub	r2,r2,r4
   10824:	f800283a 	ret

00010828 <_write_r>:
   10828:	defffd04 	addi	sp,sp,-12
   1082c:	dc000015 	stw	r16,0(sp)
   10830:	04000074 	movhi	r16,1
   10834:	dc400115 	stw	r17,4(sp)
   10838:	84039b04 	addi	r16,r16,3692
   1083c:	2023883a 	mov	r17,r4
   10840:	2809883a 	mov	r4,r5
   10844:	300b883a 	mov	r5,r6
   10848:	380d883a 	mov	r6,r7
   1084c:	dfc00215 	stw	ra,8(sp)
   10850:	80000015 	stw	zero,0(r16)
   10854:	0010ba00 	call	10ba0 <write>
   10858:	00ffffc4 	movi	r3,-1
   1085c:	10c0031e 	bne	r2,r3,1086c <_write_r+0x44>
   10860:	80c00017 	ldw	r3,0(r16)
   10864:	18000126 	beq	r3,zero,1086c <_write_r+0x44>
   10868:	88c00015 	stw	r3,0(r17)
   1086c:	dfc00217 	ldw	ra,8(sp)
   10870:	dc400117 	ldw	r17,4(sp)
   10874:	dc000017 	ldw	r16,0(sp)
   10878:	dec00304 	addi	sp,sp,12
   1087c:	f800283a 	ret

00010880 <__divsi3>:
   10880:	20001b16 	blt	r4,zero,108f0 <__divsi3+0x70>
   10884:	000f883a 	mov	r7,zero
   10888:	28001616 	blt	r5,zero,108e4 <__divsi3+0x64>
   1088c:	200d883a 	mov	r6,r4
   10890:	29001a2e 	bgeu	r5,r4,108fc <__divsi3+0x7c>
   10894:	00800804 	movi	r2,32
   10898:	00c00044 	movi	r3,1
   1089c:	00000106 	br	108a4 <__divsi3+0x24>
   108a0:	10000d26 	beq	r2,zero,108d8 <__divsi3+0x58>
   108a4:	294b883a 	add	r5,r5,r5
   108a8:	10bfffc4 	addi	r2,r2,-1
   108ac:	18c7883a 	add	r3,r3,r3
   108b0:	293ffb36 	bltu	r5,r4,108a0 <__alt_data_end+0xffff68a0>
   108b4:	0005883a 	mov	r2,zero
   108b8:	18000726 	beq	r3,zero,108d8 <__divsi3+0x58>
   108bc:	0005883a 	mov	r2,zero
   108c0:	31400236 	bltu	r6,r5,108cc <__divsi3+0x4c>
   108c4:	314dc83a 	sub	r6,r6,r5
   108c8:	10c4b03a 	or	r2,r2,r3
   108cc:	1806d07a 	srli	r3,r3,1
   108d0:	280ad07a 	srli	r5,r5,1
   108d4:	183ffa1e 	bne	r3,zero,108c0 <__alt_data_end+0xffff68c0>
   108d8:	38000126 	beq	r7,zero,108e0 <__divsi3+0x60>
   108dc:	0085c83a 	sub	r2,zero,r2
   108e0:	f800283a 	ret
   108e4:	014bc83a 	sub	r5,zero,r5
   108e8:	39c0005c 	xori	r7,r7,1
   108ec:	003fe706 	br	1088c <__alt_data_end+0xffff688c>
   108f0:	0109c83a 	sub	r4,zero,r4
   108f4:	01c00044 	movi	r7,1
   108f8:	003fe306 	br	10888 <__alt_data_end+0xffff6888>
   108fc:	00c00044 	movi	r3,1
   10900:	003fee06 	br	108bc <__alt_data_end+0xffff68bc>

00010904 <__modsi3>:
   10904:	20001716 	blt	r4,zero,10964 <__modsi3+0x60>
   10908:	000f883a 	mov	r7,zero
   1090c:	2005883a 	mov	r2,r4
   10910:	28001216 	blt	r5,zero,1095c <__modsi3+0x58>
   10914:	2900162e 	bgeu	r5,r4,10970 <__modsi3+0x6c>
   10918:	01800804 	movi	r6,32
   1091c:	00c00044 	movi	r3,1
   10920:	00000106 	br	10928 <__modsi3+0x24>
   10924:	30000a26 	beq	r6,zero,10950 <__modsi3+0x4c>
   10928:	294b883a 	add	r5,r5,r5
   1092c:	31bfffc4 	addi	r6,r6,-1
   10930:	18c7883a 	add	r3,r3,r3
   10934:	293ffb36 	bltu	r5,r4,10924 <__alt_data_end+0xffff6924>
   10938:	18000526 	beq	r3,zero,10950 <__modsi3+0x4c>
   1093c:	1806d07a 	srli	r3,r3,1
   10940:	11400136 	bltu	r2,r5,10948 <__modsi3+0x44>
   10944:	1145c83a 	sub	r2,r2,r5
   10948:	280ad07a 	srli	r5,r5,1
   1094c:	183ffb1e 	bne	r3,zero,1093c <__alt_data_end+0xffff693c>
   10950:	38000126 	beq	r7,zero,10958 <__modsi3+0x54>
   10954:	0085c83a 	sub	r2,zero,r2
   10958:	f800283a 	ret
   1095c:	014bc83a 	sub	r5,zero,r5
   10960:	003fec06 	br	10914 <__alt_data_end+0xffff6914>
   10964:	0109c83a 	sub	r4,zero,r4
   10968:	01c00044 	movi	r7,1
   1096c:	003fe706 	br	1090c <__alt_data_end+0xffff690c>
   10970:	00c00044 	movi	r3,1
   10974:	003ff106 	br	1093c <__alt_data_end+0xffff693c>

00010978 <__udivsi3>:
   10978:	200d883a 	mov	r6,r4
   1097c:	2900152e 	bgeu	r5,r4,109d4 <__udivsi3+0x5c>
   10980:	28001416 	blt	r5,zero,109d4 <__udivsi3+0x5c>
   10984:	00800804 	movi	r2,32
   10988:	00c00044 	movi	r3,1
   1098c:	00000206 	br	10998 <__udivsi3+0x20>
   10990:	10000e26 	beq	r2,zero,109cc <__udivsi3+0x54>
   10994:	28000516 	blt	r5,zero,109ac <__udivsi3+0x34>
   10998:	294b883a 	add	r5,r5,r5
   1099c:	10bfffc4 	addi	r2,r2,-1
   109a0:	18c7883a 	add	r3,r3,r3
   109a4:	293ffa36 	bltu	r5,r4,10990 <__alt_data_end+0xffff6990>
   109a8:	18000826 	beq	r3,zero,109cc <__udivsi3+0x54>
   109ac:	0005883a 	mov	r2,zero
   109b0:	31400236 	bltu	r6,r5,109bc <__udivsi3+0x44>
   109b4:	314dc83a 	sub	r6,r6,r5
   109b8:	10c4b03a 	or	r2,r2,r3
   109bc:	1806d07a 	srli	r3,r3,1
   109c0:	280ad07a 	srli	r5,r5,1
   109c4:	183ffa1e 	bne	r3,zero,109b0 <__alt_data_end+0xffff69b0>
   109c8:	f800283a 	ret
   109cc:	0005883a 	mov	r2,zero
   109d0:	f800283a 	ret
   109d4:	00c00044 	movi	r3,1
   109d8:	003ff406 	br	109ac <__alt_data_end+0xffff69ac>

000109dc <__umodsi3>:
   109dc:	2005883a 	mov	r2,r4
   109e0:	2900122e 	bgeu	r5,r4,10a2c <__umodsi3+0x50>
   109e4:	28001116 	blt	r5,zero,10a2c <__umodsi3+0x50>
   109e8:	01800804 	movi	r6,32
   109ec:	00c00044 	movi	r3,1
   109f0:	00000206 	br	109fc <__umodsi3+0x20>
   109f4:	30000c26 	beq	r6,zero,10a28 <__umodsi3+0x4c>
   109f8:	28000516 	blt	r5,zero,10a10 <__umodsi3+0x34>
   109fc:	294b883a 	add	r5,r5,r5
   10a00:	31bfffc4 	addi	r6,r6,-1
   10a04:	18c7883a 	add	r3,r3,r3
   10a08:	293ffa36 	bltu	r5,r4,109f4 <__alt_data_end+0xffff69f4>
   10a0c:	18000626 	beq	r3,zero,10a28 <__umodsi3+0x4c>
   10a10:	1806d07a 	srli	r3,r3,1
   10a14:	11400136 	bltu	r2,r5,10a1c <__umodsi3+0x40>
   10a18:	1145c83a 	sub	r2,r2,r5
   10a1c:	280ad07a 	srli	r5,r5,1
   10a20:	183ffb1e 	bne	r3,zero,10a10 <__alt_data_end+0xffff6a10>
   10a24:	f800283a 	ret
   10a28:	f800283a 	ret
   10a2c:	00c00044 	movi	r3,1
   10a30:	003ff706 	br	10a10 <__alt_data_end+0xffff6a10>

00010a34 <__mulsi3>:
   10a34:	0005883a 	mov	r2,zero
   10a38:	20000726 	beq	r4,zero,10a58 <__mulsi3+0x24>
   10a3c:	20c0004c 	andi	r3,r4,1
   10a40:	2008d07a 	srli	r4,r4,1
   10a44:	18000126 	beq	r3,zero,10a4c <__mulsi3+0x18>
   10a48:	1145883a 	add	r2,r2,r5
   10a4c:	294b883a 	add	r5,r5,r5
   10a50:	203ffa1e 	bne	r4,zero,10a3c <__alt_data_end+0xffff6a3c>
   10a54:	f800283a 	ret
   10a58:	f800283a 	ret

00010a5c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10a5c:	deffff04 	addi	sp,sp,-4
   10a60:	01000074 	movhi	r4,1
   10a64:	01400074 	movhi	r5,1
   10a68:	dfc00015 	stw	ra,0(sp)
   10a6c:	21032304 	addi	r4,r4,3212
   10a70:	29435f04 	addi	r5,r5,3452

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10a74:	2140061e 	bne	r4,r5,10a90 <alt_load+0x34>
   10a78:	01000074 	movhi	r4,1
   10a7c:	01400074 	movhi	r5,1
   10a80:	21000804 	addi	r4,r4,32
   10a84:	29400804 	addi	r5,r5,32
   10a88:	2140121e 	bne	r4,r5,10ad4 <alt_load+0x78>
   10a8c:	00000b06 	br	10abc <alt_load+0x60>
   10a90:	00c00074 	movhi	r3,1
   10a94:	18c35f04 	addi	r3,r3,3452
   10a98:	1907c83a 	sub	r3,r3,r4
   10a9c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10aa0:	10fff526 	beq	r2,r3,10a78 <__alt_data_end+0xffff6a78>
    {
      *to++ = *from++;
   10aa4:	114f883a 	add	r7,r2,r5
   10aa8:	39c00017 	ldw	r7,0(r7)
   10aac:	110d883a 	add	r6,r2,r4
   10ab0:	10800104 	addi	r2,r2,4
   10ab4:	31c00015 	stw	r7,0(r6)
   10ab8:	003ff906 	br	10aa0 <__alt_data_end+0xffff6aa0>
   10abc:	01000074 	movhi	r4,1
   10ac0:	01400074 	movhi	r5,1
   10ac4:	21031a04 	addi	r4,r4,3176
   10ac8:	29431a04 	addi	r5,r5,3176

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10acc:	2140101e 	bne	r4,r5,10b10 <alt_load+0xb4>
   10ad0:	00000b06 	br	10b00 <alt_load+0xa4>
   10ad4:	00c00074 	movhi	r3,1
   10ad8:	18c00804 	addi	r3,r3,32
   10adc:	1907c83a 	sub	r3,r3,r4
   10ae0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10ae4:	10fff526 	beq	r2,r3,10abc <__alt_data_end+0xffff6abc>
    {
      *to++ = *from++;
   10ae8:	114f883a 	add	r7,r2,r5
   10aec:	39c00017 	ldw	r7,0(r7)
   10af0:	110d883a 	add	r6,r2,r4
   10af4:	10800104 	addi	r2,r2,4
   10af8:	31c00015 	stw	r7,0(r6)
   10afc:	003ff906 	br	10ae4 <__alt_data_end+0xffff6ae4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10b00:	0010c580 	call	10c58 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10b04:	dfc00017 	ldw	ra,0(sp)
   10b08:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10b0c:	0010c5c1 	jmpi	10c5c <alt_icache_flush_all>
   10b10:	00c00074 	movhi	r3,1
   10b14:	18c32304 	addi	r3,r3,3212
   10b18:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10b1c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10b20:	18bff726 	beq	r3,r2,10b00 <__alt_data_end+0xffff6b00>
    {
      *to++ = *from++;
   10b24:	114f883a 	add	r7,r2,r5
   10b28:	39c00017 	ldw	r7,0(r7)
   10b2c:	110d883a 	add	r6,r2,r4
   10b30:	10800104 	addi	r2,r2,4
   10b34:	31c00015 	stw	r7,0(r6)
   10b38:	003ff906 	br	10b20 <__alt_data_end+0xffff6b20>

00010b3c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10b3c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10b40:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10b44:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10b48:	0010c000 	call	10c00 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10b4c:	0010c200 	call	10c20 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10b50:	d1a04117 	ldw	r6,-32508(gp)
   10b54:	d1604217 	ldw	r5,-32504(gp)
   10b58:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10b5c:	dfc00017 	ldw	ra,0(sp)
   10b60:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10b64:	001007c1 	jmpi	1007c <main>

00010b68 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10b68:	defffe04 	addi	sp,sp,-8
   10b6c:	dc000015 	stw	r16,0(sp)
   10b70:	dfc00115 	stw	ra,4(sp)
   10b74:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10b78:	001080c0 	call	1080c <strlen>
   10b7c:	01000074 	movhi	r4,1
   10b80:	000f883a 	mov	r7,zero
   10b84:	100d883a 	mov	r6,r2
   10b88:	800b883a 	mov	r5,r16
   10b8c:	21035d04 	addi	r4,r4,3444
#else
    return fputs(str, stdout);
#endif
#endif
}
   10b90:	dfc00117 	ldw	ra,4(sp)
   10b94:	dc000017 	ldw	r16,0(sp)
   10b98:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10b9c:	0010c241 	jmpi	10c24 <altera_avalon_jtag_uart_write>

00010ba0 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10ba0:	00800044 	movi	r2,1
   10ba4:	20800226 	beq	r4,r2,10bb0 <write+0x10>
   10ba8:	00800084 	movi	r2,2
   10bac:	2080041e 	bne	r4,r2,10bc0 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10bb0:	01000074 	movhi	r4,1
   10bb4:	000f883a 	mov	r7,zero
   10bb8:	21035d04 	addi	r4,r4,3444
   10bbc:	0010c241 	jmpi	10c24 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10bc0:	d0a00317 	ldw	r2,-32756(gp)
   10bc4:	10000926 	beq	r2,zero,10bec <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10bc8:	deffff04 	addi	sp,sp,-4
   10bcc:	dfc00015 	stw	ra,0(sp)
   10bd0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10bd4:	00c01444 	movi	r3,81
   10bd8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10bdc:	00bfffc4 	movi	r2,-1
   10be0:	dfc00017 	ldw	ra,0(sp)
   10be4:	dec00104 	addi	sp,sp,4
   10be8:	f800283a 	ret
   10bec:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10bf0:	00c01444 	movi	r3,81
   10bf4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10bf8:	00bfffc4 	movi	r2,-1
   10bfc:	f800283a 	ret

00010c00 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10c00:	deffff04 	addi	sp,sp,-4
   10c04:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   10c08:	0010c600 	call	10c60 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10c0c:	00800044 	movi	r2,1
   10c10:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10c14:	dfc00017 	ldw	ra,0(sp)
   10c18:	dec00104 	addi	sp,sp,4
   10c1c:	f800283a 	ret

00010c20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10c20:	f800283a 	ret

00010c24 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10c24:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10c28:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10c2c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10c30:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10c34:	2980072e 	bgeu	r5,r6,10c54 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10c38:	38c00037 	ldwio	r3,0(r7)
   10c3c:	18ffffec 	andhi	r3,r3,65535
   10c40:	183ffc26 	beq	r3,zero,10c34 <__alt_data_end+0xffff6c34>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10c44:	28c00007 	ldb	r3,0(r5)
   10c48:	20c00035 	stwio	r3,0(r4)
   10c4c:	29400044 	addi	r5,r5,1
   10c50:	003ff806 	br	10c34 <__alt_data_end+0xffff6c34>

  return count;
}
   10c54:	f800283a 	ret

00010c58 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10c58:	f800283a 	ret

00010c5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10c5c:	f800283a 	ret

00010c60 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10c60:	000170fa 	wrctl	ienable,zero
   10c64:	f800283a 	ret
